R-based validation software
========================================================
author: Mark van der Loo
date: 07/07/2015


Short overview
========================================================

- ```editrules``` (on [CRAN](http://cran.r-project.org/))
- ```validate``` (only on [github](https://github.com/data-cleaning/validate))

to try:
```
install.packages('editrules')
```
or (first install the [drat](http://cran.r-project.org/web/packages/drat/index.html) package and [rtools](http://cran.r-project.org/bin/windows/Rtools/))
```
drat::addRepo("markvanderloo")
install.packages("validate")
```

R package editrules
========================================================

- In-record validation rules:
    - linear equalities $$profit + cost = revenue$$
    - linear ineqeualities $$profit < 0.6*revenue$$
    - conditional: if male, then not pregnant
    - mixed: if people employed, then salary payed
- Check data against rules
- Error localization
- Detection of inconsistencies
- (rudamentary) redundancy detection
    - but complete detection is upcoming



R package editrules: detecting errors
========================================================

```{r}
library(editrules)
edits <- editfile("myedits.txt")
retailers <- read.csv2("retailers.csv")
ve <- violatedEdits(edits,retailers)
plot(ve)
```

R package editrules: localizing errors
========================================================
Using mixed integer programming, based on the principle of minimal change.

```{r}
el <- localizeErrors(edits, retailers, method="mip")
plot(el)
```

R package editrules: some analyses
========================================================

```{r}
plot(edits)
```

R package editrules: some analyses
========================================================
```{r,}
summary(edits)
```


R package validate
========================================================

- One tool, doing one thing, really well.
- Less features, but more rule types
- More programmability
    - templates (variable groups)
    - transient variables
    - file inclusion
- Build other features on top:
    - error localization
    - rule management
    - visualisation and network analyses


The main design
========================================================


![](Rplot.png)
```{r,echo=FALSE,results="hide"}
library(DiagrammeR)
DiagrammeR("
  graph LR
    validator --> confront;
    data --> confront;
    confront --> confrontation;
    style confront fill:#E5E25F;
")
```

Validate: workflow
========================================================

```{r}
library(validate)
v <- validator(.files="myedits2.txt")
v
```

Validate: confront data with rules
========================================================

```{r}
cf <- confront(v,retailers)
summary(cf)
```


Validate: confront data with rules
========================================================

```{r}
 barplot(cf)
```


Functional dependencies
========================================================

If variables city and street are the same for two records,
then zipcode must be the same.

$$
city, street \to zipcode
$$

- Developed in the 1970s for DB specification
- FD's span a weak logic (no contradictions)
- FD's can be evaluated in $\mathcal{O}(n)$ time and memory. 


Functional dependencies in validate
========================================================

```{r}
vd <- validator(city + street ~ zipcode)
dat <- data.frame(
  street = c('kerkstraat','kerkstraat','kerkstraat','kerkstraat')
  , city = c('DH','DH','H','DH')
  , zipcode = c('2495','2496','8888','2495')
)
cf <- confront(vd,dat)
values(cf)
```

The end
========================================================


Questions?








